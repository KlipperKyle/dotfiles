#!/bin/bash
#
# hacktime
#
# (C) 2024 Kyle Terrien <kyle@terren.us>
# License: GPL-2.0-or-later
#
# Hack time, like Hackerman from Kung Fury.
#
# This is a demo written to show off what is possible with whiptail
# (or dialog).  It does not actually hack time, sorry.
#
# See:
# Whiptail tutorial: https://en.wikibooks.org/wiki/Bash_Shell_Scripting/Whiptail
# Kung Fury: https://www.youtube.com/watch?v=bS5P_LAqiVg
# Hackerman scene: https://www.youtube.com/watch?v=6jSVEEqqbbY
# Hackerman tutorial: https://www.youtube.com/watch?v=KEkrWRHCDQU

# Dialog program: whiptail is preinstalled in Debian and Ubuntu
: "${DIALOG:=whiptail}"

checkpasswd() {
    # A very rudimentary password check
    local len="${#1}"
    (( len > 0 && len % 2 == 0 ))
}

log() {
    local tag="$1" ; shift
    for line in "$@" ; do
	printf '[%s] %s\n' "$tag" "$line"
    done
}

d() {
    # Common options for dialog program
    "$DIALOG" --backtitle 'Hackerman Toolkit' "$@"
}

printinc() {
    # Print an increasing list of numbers
    local start=$1
    local end=$2
    local step=$3
    local sleep=$4
    for ((i = start ; i <= end ; i += step)); do
	echo "$i"
	sleep "$sleep"
    done
}

printdec() {
    # Print a decreasing list of numbers
    local start=$1
    local end=$2
    local step=$3
    local sleep=$4
    for ((i = start ; i >= end ; i -= step)); do
	echo "$i"
	sleep "$sleep"
    done
}

printfullseq() {
    # The full sequence for the "Hacking time" gauge
    printinc 0 80 1 0.05
    sleep 1
    printinc 80 92 2 1
    sleep 4
    printinc 92 99 1 0.1
    sleep 2
}

testterm() {
    d --infobox 'Testing terminal...' 0 0 > /dev/null || exit
}

menu() {
    ACTION=$(d --menu 'Choose task:' 0 0 0 \
      "hacktime" "Initialize the Time Warp and hack time" \
      "sysinfo" "Display system information" \
      "exit" "Exit" \
      3>&1 1>&2 2>&3 ) || exit
}

sysinfo() {
    d --title 'System information' --scrolltext --textbox /etc/os-release 0 0
}

method() { :; }

optmodules() { :; }

getpasswd() {
    local passwd
    passwd=$(d --title 'Password' --passwordbox $'Time warp protected\n\nEnter password to decrypt' 12 0 3>&1 1>&2 2>&3) || exit
    checkpasswd "${passwd}"
}

do_unauthorized() {
    d --title 'Unauthorized!' --msgbox $'Unauthorized access detected!\n\nProceeding with secure wipe of DataWraith module...' 0 0
    printdec 100 0 4 0.1 | d --title 'Unauthorized!' --gauge 'Secure wiping DataWraith module...' 0 70 100
    log time_warp \
	"A secret phrase is not my strength" \
	"Try a word with even length"
    exit 1
}

showready() {
    d --title 'Ready' --msgbox $'Time warp ready\n\nLink to all system established' 0 0
}

getyear() {
    YEAR=$(d --title 'Year' --inputbox 'Insert year for time warp:' 0 0 2005 3>&1 1>&2 2>&3) || exit
}

confirm() {
    d --title 'Proceed?' --yesno "Year set to ${YEAR} -- VERIFIED"$'\n\n''You'\''re about to hack time, are you sure?' 0 0 || exit
}

doit() {
    printfullseq | d --gauge 'Hacking time...' 0 70 0
    d --title "ERROR" --msgbox 'ERROR!  HACKING TOO MUCH TIME!' 0 0
    d --title "ERROR" --msgbox 'Bailing out... you'\''re on your own, kid.' 0 0
}

main() {
    testterm
    while menu ; do
	case "$ACTION" in
	    "hacktime") break;;
	    "sysinfo") sysinfo;;
	    "exit") exit;;
	esac
    done
    method
    optmodules
    getpasswd || do_unauthorized
    showready
    getyear
    confirm
    doit
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
